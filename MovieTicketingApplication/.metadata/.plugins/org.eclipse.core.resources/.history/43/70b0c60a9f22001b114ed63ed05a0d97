package com.manipal.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.manipal.bean.Ticket;
import com.manipal.bean.User;
import com.manipal.bean.Movie;
import com.manipal.exception.InvalidAgeException;
import com.manipal.exception.MovieNotFoundException;
import com.manipal.exception.TicketNotFoundException;
import com.manipal.exception.UserNotFoundException;
import com.manipal.proxy.MovieServiceProxy;
import com.manipal.proxy.UserServiceProxy;
import com.manipal.repository.TicketRepository;

@Service
public class TicketService {
	
	//static int ticketIdCounter = 0;
	
	@Autowired
	private TicketRepository ticketRepository;
	
	@Autowired
	private MovieServiceProxy movieServiceProxy;
	
	@Autowired
	private UserServiceProxy userServiceProxy;
	
	public Ticket getTicket(int ticketId) {
		
		return ticketRepository.findById(ticketId).orElseThrow(() -> new TicketNotFoundException("Ticket Details not found for id " + ticketId));
		
	}
	
	public Ticket bookTicket(String userName, String movieName, int noOfTickets) {

		try {
			
			User user = userServiceProxy.getUserFromUserName(userName);
			
			Movie movie = movieServiceProxy.getMovieFromMovieName(movieName);
			
			if (movie.getRating().equals("a")) {
				if(user.getAge()<18) {
					throw new InvalidAgeException("Too young to watch this movie");
				}
			}
			
			Ticket ticket = new Ticket();
			
			//ticket.setTicketId(ticketIdCounter);
			ticket.setMovieId(movie.getMovieId());
			ticket.setUserId(user.getUserId());
			ticket.setNoOfTickets(noOfTickets);
			ticket.setTotalCost(calculateTotalTicketCost(noOfTickets));
			
			movieServiceProxy.updateNoOfTickets(movie.getMovieId(), noOfTickets);
			
			return ticketRepository.save(ticket);
			
		}catch(UserNotFoundException unfe) {
			throw new UserNotFoundException("User details not found for " + userName);
		}catch(MovieNotFoundException mnfe) {
			throw new MovieNotFoundException("Movie details not found for " + movieName);
		}catch(Exception e) {
			throw new UserDetailsException("User or movie details not found");
		}
		
		

		

		
		//System.out.println(movie.getAvailableNoOfTickets());
		

			
	}
	
	public double calculateTotalTicketCost(int noOfTickets) {
		
		return noOfTickets*150;
		
	}

	public String cancelTicket(int ticketId) {
		// TODO Auto-generated method stub
		
		ticketRepository.deleteById(ticketId);
		
		return "Successfully cancelled ticket";
		
	}

}
